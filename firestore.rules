rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if user is the owner of a document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Teams collection
    match /teams/{teamId} {
      // Allow read if authenticated
      allow read: if isAuthenticated();
      
      // Allow create if authenticated
      allow create: if isAuthenticated() && 
                    request.resource.data.creatorId == request.auth.uid;
      
      // Allow update by team creator or for specific role updates
      allow update: if isAuthenticated() && (
                     // Team creator can update anything
                     resource.data.creatorId == request.auth.uid ||
                     
                     // Allow users to join/leave open roles
                     (request.resource.data.creatorId == resource.data.creatorId && 
                      request.resource.data.name == resource.data.name)
                    );
      
      // Only team creator can delete
      allow delete: if isAuthenticated() && resource.data.creatorId == request.auth.uid;
      
      // Allow access to all subcollections (including comments)
      match /{document=**} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
        allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      }
    }
    
    // Users collection
    match /users/{userId} {
      // Users can read other user profiles
      allow read: if isAuthenticated();
      
      // Users can only write to their own document
      allow write: if isOwner(userId);
    }
  }
}